using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Web;
using System.Web.UI.WebControls;
using System.Web.UI;

namespace WebApplication1.Code
{
    public class StarwarsGridViewColumnsGenerator : AutoFieldsGenerator
    {
        //
        // Summary:
        //     Generates fields based on the current data item.
        //
        // Parameters:
        //   dataObject:
        //     The current data item.
        //
        //   control:
        //     The current control.
        //
        // Returns:
        //     The list of generated fields.
        public override List<AutoGeneratedField> CreateAutoGeneratedFields(object dataObject, Control control)
        {
            if (!(control is GridView))
            {
                throw new ArgumentException("Error a webcontrol is not a gridview");
            }

            PagedDataSource pagedDataSource = dataObject as PagedDataSource;
            GridView gridView = control as GridView;
            if (pagedDataSource == null)
            {
                return null;
            }

            List<AutoGeneratedField> list = new List<AutoGeneratedField>();
            PropertyDescriptorCollection propertyDescriptorCollection = null;
            bool flag = true;
            propertyDescriptorCollection = ((ITypedList)pagedDataSource).GetItemProperties(new PropertyDescriptor[0]);
            if (propertyDescriptorCollection == null)
            {
                Type type = null;
                object obj = null;
                IEnumerable dataSource = pagedDataSource.DataSource;
                Type type2 = dataSource.GetType();
                PropertyInfo property = type2.GetProperty("Item", BindingFlags.Instance | BindingFlags.Public, null, null, new Type[1] { typeof(int) }, null);
                if (property != null)
                {
                    type = property.PropertyType;
                }

                if (type == null || type == typeof(object))
                {
                    IEnumerator enumerator = pagedDataSource.GetEnumerator();
                    if (enumerator.MoveNext())
                    {
                        obj = enumerator.Current;
                    }
                    else
                    {
                        flag = false;
                    }

                    if (obj != null)
                    {
                        type = obj.GetType();
                    }

                    //gridView.StoreEnumerator(enumerator, obj);
                }

                if (obj != null && obj is ICustomTypeDescriptor)
                {
                    propertyDescriptorCollection = TypeDescriptor.GetProperties(obj);
                }
                else if (type != null)
                {
                    if (ShouldGenerateField(type, gridView))
                    {
                        AutoGeneratedFieldProperties autoGeneratedFieldProperties = new AutoGeneratedFieldProperties();
                        ((IStateManager)autoGeneratedFieldProperties).TrackViewState();
                        autoGeneratedFieldProperties.Type = type;
                        autoGeneratedFieldProperties.Name = "Item";
                        autoGeneratedFieldProperties.DataField = BoundField.ThisExpression;
                        AutoGeneratedField autoGeneratedField = CreateAutoGeneratedFieldFromFieldProperties(autoGeneratedFieldProperties);
                        if (autoGeneratedField != null)
                        {
                            list.Add(autoGeneratedField);
                            base.AutoGeneratedFieldProperties.Add(autoGeneratedFieldProperties);
                        }
                    }
                    else
                    {
                        propertyDescriptorCollection = TypeDescriptor.GetProperties(type);
                    }
                }
            }
            else if (propertyDescriptorCollection.Count == 0)
            {
                flag = false;
            }

            if (propertyDescriptorCollection != null && propertyDescriptorCollection.Count != 0)
            {
                string[] dataKeyNames = gridView.DataKeyNames;
                int num = dataKeyNames.Length;
                string[] array = new string[num];
                for (int i = 0; i < num; i++)
                {
                    array[i] = dataKeyNames[i].ToLowerInvariant();
                }

                foreach (PropertyDescriptor item in propertyDescriptorCollection)
                {
                    Type propertyType = item.PropertyType;
                    if (ShouldGenerateField(propertyType, gridView))
                    {
                        string name = item.Name;
                        bool isReadOnly = ((IList)array).Contains((object)name.ToLowerInvariant());
                        AutoGeneratedFieldProperties autoGeneratedFieldProperties2 = new AutoGeneratedFieldProperties();
                        ((IStateManager)autoGeneratedFieldProperties2).TrackViewState();
                        autoGeneratedFieldProperties2.Name = name;
                        autoGeneratedFieldProperties2.IsReadOnly = isReadOnly;
                        autoGeneratedFieldProperties2.Type = propertyType;
                        autoGeneratedFieldProperties2.DataField = name;
                        AutoGeneratedField autoGeneratedField2 = CreateAutoGeneratedFieldFromFieldProperties(autoGeneratedFieldProperties2);
                        if (autoGeneratedField2 != null)
                        {
                            list.Add(autoGeneratedField2);
                            base.AutoGeneratedFieldProperties.Add(autoGeneratedFieldProperties2);
                        }
                    }
                }
            }

            if (list.Count == 0 && flag)
            {
                //throw new InvalidOperationException(SR.GetString("GridView_NoAutoGenFields", gridView.ID));
                throw new InvalidOperationException("GridView_NoAutoGenFields");
            }

            return list;
        }

        private bool ShouldGenerateField(Type propertyType, GridView gridView)
        {
            //if (gridView.RenderingCompatibility < VersionUtil.Framework45 && !base.AutoGenerateEnumFields.HasValue)
            //{
            //    return gridView.IsBindableType(propertyType);
            //}

            //return DataBoundControlHelper.IsBindableType(propertyType, base.AutoGenerateEnumFields ?? true);
            return true;
        }

        //
        // Summary:
        //     Initializes a new instance of the System.Web.UI.WebControls.GridViewColumnsGenerator
        //     class.
        public StarwarsGridViewColumnsGenerator()
        {
        }
    }
}